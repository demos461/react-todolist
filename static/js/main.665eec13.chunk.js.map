{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/Login/authSlice.ts","app/appSlice.ts","features/TodolistsList/todolistsSlice.ts","features/TodolistsList/tasksSlice.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","error","message","logoutTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","isLoggedIn","rejectWithValue","loginTC","authSlice","createSlice","name","initialState","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","authReducer","reducer","initializeAppTC","isInitialized","appSlice","status","appReducer","fetchTodolistsTC","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","item","changeTodolistTitleTC","todolistsSlice","changeTodolistFilter","todolist","find","tl","filter","entityStatus","map","index","findIndex","splice","unshift","todolistsReducer","updateTaskTC","getState","task","tasks","t","apiModel","deadline","description","priority","startDate","domainModel","addTaskTC","fetchTasksTC","items","removeTaskTC","tasksReducer","updateTask","todoListId","forEach","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","todolists","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","captcha","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.665eec13.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fb1b255d-daf2-447b-9658-1df546c81b09'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginDataType) {\r\n        return instance.post<LoginDataType, AxiosResponse<ResponseType<{userId: number}>>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeType>>('auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: boolean\r\n}\r\n\r\ntype MeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport { setAppError, setAppStatus } from '../app/appSlice'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppError(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n","import {authAPI, LoginDataType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setAppStatus} from '../../app/appSlice';\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus('succeeded'))\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({isLoggedIn: true})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return  thunkAPI.rejectWithValue({isLoggedIn: true})\r\n    }\r\n})\r\n\r\nexport const loginTC = createAsyncThunk('auth/login', async (param: LoginDataType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus('succeeded'))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({isLoggedIn: false})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({isLoggedIn: false})\r\n    }\r\n\r\n})\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn: (state, action: PayloadAction<boolean>) => {\r\n            state.isLoggedIn = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setIsLoggedIn} = authSlice.actions\r\n\r\nexport const authReducer = authSlice.reducer","import {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedIn} from \"../features/Login/authSlice\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, thunkAPI) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setIsLoggedIn(true));\r\n            return {isInitialized: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({isInitialized: true})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({isInitialized: false})\r\n    }\r\n})\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppStatus: (state, action: PayloadAction<RequestStatusType>) => {\r\n            state.status = action.payload\r\n        },\r\n        setAppError: (state, action: PayloadAction<string | null>) => {\r\n            state.error = action.payload\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setAppStatus, setAppError} = appSlice.actions\r\n\r\nexport const appReducer = appSlice.reducer\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatus} from '../../app/appSlice'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolist', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus('succeeded'))\r\n        return res.data\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    thunkAPI.dispatch(changeTodolistEntityStatus({todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus('succeeded'))\r\n            return {id: todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus('succeeded'))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus('succeeded'))\r\n            return {todolistId: param.id, title: param.title}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst todolistsSlice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter: (state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) => {\r\n            const todolist = state.find(tl => tl.id === action.payload.todolistId)\r\n            if (todolist) todolist.filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus: (state, action: PayloadAction<{ todolistId: string, status: RequestStatusType }>) => {\r\n            const todolist = state.find(tl => tl.id === action.payload.todolistId)\r\n            if (todolist) todolist.entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) state.splice(index, 1)\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const todolist = state.find(tl => tl.id === action.payload.todolistId)\r\n            if (todolist) todolist.title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const {\r\n    changeTodolistFilter,\r\n    changeTodolistEntityStatus\r\n} = todolistsSlice.actions\r\n\r\nexport const todolistsReducer = todolistsSlice.reducer\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatus} from '../../app/appSlice'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './todolistsSlice'\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return {\r\n                taskId: param.taskId,\r\n                domainModel: param.domainModel,\r\n                todolistId: param.todolistId\r\n            }\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus('succeeded'))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        thunkAPI.dispatch(setAppStatus('succeeded'))\r\n        const tasks = res.data.items\r\n        return {tasks, todolistId}\r\n\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus('succeeded'))\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {\r\n        updateTask: (state, action: PayloadAction<{ taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.id] = []\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) tasks.splice(index, 1)\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = tasksSlice.reducer\r\n\r\n\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolistsSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasksSlice'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilter,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolistsSlice'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasksSlice'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel: {status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel: {title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilter({todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport { setAppError } from '../../app/appSlice';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authSlice\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC({...values, captcha: false}))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './appSlice'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport {logoutTC} from \"../features/Login/authSlice\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    const onButtonClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TODOS\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={onButtonClick} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasksSlice';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolistsSlice';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './appSlice'\r\nimport {authReducer} from \"../features/Login/authSlice\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {combineReducers} from 'redux'\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}