{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/Auth/authSlice.ts","app/appSlice.ts","features/TodolistsList/todolistsSlice.ts","features/TodolistsList/Todolist/Task/tasksSlice.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","hooks/useActions.ts","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/selectors.ts","features/Auth/selectors.ts","features/TodolistsList/TodolistsList.tsx","app/selectors.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","app/App.tsx","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","concat","put","todolistId","taskId","model","authAPI","data","TaskStatuses","handleServerAppError","dispatch","messages","length","appActions","setAppError","setAppStatus","handleServerNetworkError","error","message","logoutTC","createAsyncThunk","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","param","thunkAPI","res","wrap","_context","prev","next","sent","resultCode","abrupt","isLoggedIn","rejectWithValue","t0","stop","_x","_x2","apply","arguments","loginTC","_ref2","_callee2","_context2","_x3","_x4","authSlice","createSlice","name","initialState","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","authActions","actions","authAsyncActions","initializeAppTC","isInitialized","appSlice","status","appReducer","appAsyncActions","fetchTodolistsTC","removeTodolistTC","addTodolistTC","_ref3","_callee3","_context3","item","_x5","_x6","changeTodolistTitleTC","_ref4","_callee4","_context4","_x7","_x8","todolistsSlice","changeTodolistFilter","todolist","find","tl","filter","map","_objectSpread","entityStatus","index","findIndex","splice","unshift","todolistsActions","todolistsReducer","todolistsAsyncActions","updateTaskTC","task","apiModel","getState","tasks","t","deadline","description","priority","startDate","domainModel","addTaskTC","fetchTasksTC","items","removeTaskTC","tasksReducer","todoListId","forEach","tasksAsyncActions","rootReducer","combineReducers","todolists","app","auth","store","configureStore","useAppDispatch","useDispatch","useAppSelector","useSelector","AddItemForm","React","memo","addItem","_ref$disabled","disabled","_useState","useState","_useState2","_slicedToArray","setTitle","_useState3","_useState4","setError","addItemHandler","trim","_jsxs","children","_jsx","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","props","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","useActions","bindActionCreators","Todolist","useEffect","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","selectTasks","selectTodolists","selectIsLoggedIn","TodolistsList","_useActions","changeStatus","newTitle","addTodolist","_Fragment","Grid","container","padding","spacing","allTodolistTasks","Paper","Navigate","to","selectStatus","selectIsInitialized","selectError","Alert","forwardRef","ref","MuiAlert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","captcha","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","display","Typography","LinearProgress","Container","fixed","Routes","Route","path","element","top","textAlign","CircularProgress","ReactDOM","render","StrictMode","HashRouter","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.35cbd1c6.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fb1b255d-daf2-447b-9658-1df546c81b09'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginDataType) {\r\n        return instance.post<LoginDataType, AxiosResponse<ResponseType<{userId: number}>>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeType>>('auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: boolean\r\n}\r\n\r\ntype MeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport { appActions } from '../app/appSlice'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(appActions.setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(appActions.setAppError('Some error occurred'))\r\n    }\r\n    dispatch(appActions.setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(appActions.setAppError(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(appActions.setAppStatus('failed'))\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../../app/appSlice\";\r\nimport {authAPI, LoginDataType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({isLoggedIn: true})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({isLoggedIn: true})\r\n    }\r\n})\r\n\r\nconst loginTC = createAsyncThunk('auth/login', async (param: LoginDataType, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({isLoggedIn: false})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({isLoggedIn: false})\r\n    }\r\n})\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn: (state, action: PayloadAction<boolean>) => {\r\n            state.isLoggedIn = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = authSlice.reducer\r\n\r\nexport const authActions = authSlice.actions\r\n\r\nexport const authAsyncActions = {\r\n    loginTC,\r\n    logoutTC\r\n}\r\n\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {authActions} from \"../features/Auth/authSlice\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initializeAppTC = createAsyncThunk('app/initializeApp', async (param, thunkAPI) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(authActions.setIsLoggedIn(true));\r\n            return {isInitialized: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({isInitialized: true})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({isInitialized: false})\r\n    }\r\n})\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppStatus: (state, action: PayloadAction<RequestStatusType>) => {\r\n            state.status = action.payload\r\n        },\r\n        setAppError: (state, action: PayloadAction<string | null>) => {\r\n            state.error = action.payload\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = appSlice.reducer\r\n\r\nexport const appActions = appSlice.actions\r\n\r\nexport const appAsyncActions = {\r\n    initializeAppTC\r\n}\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {appActions, RequestStatusType} from '../../app/appSlice'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolist', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n        return res.data\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n            return {id: todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n            return {todolistId: param.id, title: param.title}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst todolistsSlice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter: (state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) => {\r\n            const todolist = state.find(tl => tl.id === action.payload.todolistId)\r\n            if (todolist) todolist.filter = action.payload.filter\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) state.splice(index, 1)\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const todolist = state.find(tl => tl.id === action.payload.todolistId)\r\n            if (todolist) todolist.title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsActions = todolistsSlice.actions\r\n\r\nexport const todolistsReducer = todolistsSlice.reducer\r\n\r\nexport const todolistsAsyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../../../api/todolists-api'\r\nimport {RootStateType} from '../../../../app/store'\r\nimport {appActions} from '../../../../app/appSlice'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {todolistsAsyncActions} from '../../todolistsSlice'\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as RootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return {\r\n                taskId: param.taskId,\r\n                domainModel: param.domainModel,\r\n                todolistId: param.todolistId\r\n            }\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\nconst addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n        const tasks = res.data.items\r\n        return {tasks, todolistId}\r\n\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus('loading'))\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus('succeeded'))\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) tasks.splice(index, 1)\r\n        })\r\n        builder.addCase(todolistsAsyncActions.addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.id] = []\r\n        })\r\n        builder.addCase(todolistsAsyncActions.removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(todolistsAsyncActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = tasksSlice.reducer\r\n\r\nexport const tasksAsyncActions = {\r\n    addTaskTC,\r\n    removeTaskTC,\r\n    updateTaskTC,\r\n    fetchTasksTC\r\n}\r\n\r\n\r\n\r\n","import {tasksReducer} from '../features/TodolistsList/Todolist/Task/tasksSlice';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolistsSlice';\r\nimport {appReducer} from './appSlice'\r\nimport {authReducer} from \"../features/Auth/authSlice\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {combineReducers} from 'redux'\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange}: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {bindActionCreators} from \"@reduxjs/toolkit\";\r\nimport {appActions, appAsyncActions} from \"../app/appSlice\";\r\nimport {useAppDispatch} from \"../app/store\";\r\nimport {authActions, authAsyncActions} from \"../features/Auth/authSlice\";\r\nimport {todolistsActions, todolistsAsyncActions} from \"../features/TodolistsList/todolistsSlice\";\r\nimport {tasksAsyncActions} from \"../features/TodolistsList/Todolist/Task/tasksSlice\";\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useAppDispatch()\r\n    return bindActionCreators({\r\n        ...appActions,\r\n        ...appAsyncActions,\r\n        ...authActions,\r\n        ...authAsyncActions,\r\n        ...todolistsAsyncActions,\r\n        ...todolistsActions,\r\n        ...tasksAsyncActions\r\n    }, dispatch)\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolistsSlice'\r\nimport {useActions} from \"../../../hooks/useActions\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const {fetchTasksTC} = useActions()\r\n\r\n    useEffect(() => {\r\n        fetchTasksTC(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {RootStateType} from \"../../app/store\";\r\n\r\nexport const selectTasks = (state: RootStateType) => state.tasks\r\nexport const selectTodolists = (state: RootStateType) => state.todolists","import {RootStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: RootStateType) => state.auth.isLoggedIn","import React, {useCallback, useEffect} from 'react'\r\nimport {useAppSelector} from '../../app/store'\r\nimport {FilterValuesType,} from './todolistsSlice'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {selectTasks, selectTodolists} from \"./selectors\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\nimport {selectIsLoggedIn} from '../Auth/selectors';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useAppSelector(selectTodolists)\r\n    const tasks = useAppSelector(selectTasks)\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n    const {\r\n        fetchTodolistsTC,\r\n        changeTodolistTitleTC,\r\n        changeTodolistFilter,\r\n        removeTodolistTC,\r\n        addTodolistTC,\r\n        removeTaskTC,\r\n        addTaskTC,\r\n        updateTaskTC\r\n    } = useActions()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        removeTaskTC({taskId, todolistId})\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        addTaskTC({title, todolistId})\r\n\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        updateTaskTC({taskId, domainModel: {status}, todolistId})\r\n\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        updateTaskTC({taskId, domainModel: {title: newTitle}, todolistId})\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        changeTodolistFilter({todolistId, filter: value})\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        removeTodolistTC(id)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        changeTodolistTitleTC({id, title})\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        addTodolistTC(title)\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {RootStateType} from \"./store\";\r\n\r\nexport const selectStatus = (state: RootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: RootStateType) => state.app.isInitialized\r\nexport const selectError = (state: RootStateType) => state.app.error","import React, {SyntheticEvent} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from '../../app/store';\r\nimport {selectError} from '../../app/selectors';\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useAppSelector(selectError)\r\n\r\n    const {setAppError} = useActions()\r\n\r\n    const handleClose = (event?: Event | SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAppError(null)\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@mui/material';\r\nimport {useFormik} from \"formik\";\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n    const {loginTC} = useActions()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            loginTC({...values, captcha: false})\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useAppSelector} from './store'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@mui/material';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport {selectIsInitialized, selectStatus} from './selectors';\r\nimport { selectIsLoggedIn } from '../features/Auth/selectors';\r\n\r\nexport const App = () => {\r\n    const status = useAppSelector(selectStatus)\r\n    const isInitialized = useAppSelector(selectIsInitialized)\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n    const {initializeAppTC, logoutTC} = useActions()\r\n\r\n    useEffect(() => {\r\n        initializeAppTC()\r\n    }, [])\r\n\r\n    const onButtonClick = () => {\r\n        logoutTC()\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <Typography variant=\"h6\">\r\n                        TODOS\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={onButtonClick} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {App} from './app/App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}